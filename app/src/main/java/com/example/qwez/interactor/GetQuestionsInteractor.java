package com.example.qwez.interactor;

import com.example.qwez.repository.local.Game;
import com.example.qwez.repository.local.GameRepositoryType;
import com.example.qwez.repository.local.Question;
import com.example.qwez.repository.opentdb.OpenTDBType;
import com.example.qwez.util.Category;
import com.example.qwez.util.Difficulty;
import com.example.qwez.util.QuestionC;
import com.example.qwez.util.QuestionConverter;
import com.example.qwez.util.QuestionType;

import java.util.List;
import java.util.Observable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.ObservableConverter;
import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.android.schedulers.AndroidSchedulers;

/**
 * Interactor to get Questions from API, and store them in local database
 */
public class GetQuestionsInteractor {

    private final OpenTDBType openTDBType;
    private final GameRepositoryType gameRepositoryType;

    public GetQuestionsInteractor(OpenTDBType openTDBType, GameRepositoryType gameRepositoryType) {
        this.openTDBType = openTDBType;
        this.gameRepositoryType = gameRepositoryType;
    }

    /**
     * Get {@link com.example.qwez.repository.opentdb.entity.Question} Question from API,
     * convert it to an {@link com.example.qwez.repository.opentdb.entity.Question} object, and
     * store in the database.
     * @param category Question category
     * @param difficulty Question difficulty
     * @return Single that emitts a List of all Question objects in the local database, including the newly
     * returned Question from API
     */
    public Completable getQuestionByCategoryMultiple(Category category, Difficulty difficulty){
        return openTDBType
                //Get question from API
                .getQuestionByCategory(QuestionC.AMOUNT_STANDARD,
                        category.getCategory(),
                        difficulty.getDifficulty(),
                        QuestionType.MULTIPLE_CHOICE.getType())
                //convert from API Question POJO to local database Question POJO
                .map(QuestionConverter::toDatabase)
                //transform object
                .flatMapCompletable(questions -> {
                    //first add new Game to local database, return newly added Game id
                    // which is autogenerated by our database on insertion
                    int id = gameRepositoryType.addGameReturnId(new Game(Category.getAsString(category),
                            difficulty.getDifficulty())).blockingGet().intValue();  //we should not use blockingget? bad design?
                    //then, for each question, set their id to our newly create game id
                    questions.forEach(question -> question.setqId(id));
                    //then, add all questions to our local database
                    gameRepositoryType.addQuestions(questions);
                    return CompletableObserver::onComplete;})
                .observeOn(AndroidSchedulers.mainThread());

    }

}
